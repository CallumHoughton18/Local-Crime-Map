# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
variables:
  DJANGODEBUG: 'True' 
  SECRETKEY: ')ysx)^%w1c2b1175g!nv*%k-dbafk*j(kzoig+^^87^rbaf$b#'
pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python35:
      PYTHON_VERSION: '3.5'
    Python36:
      PYTHON_VERSION: '3.6'
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 3

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py` and 'requirements.txt'."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      requirements_txt = next(iglob(path.join('**', 'requirements.txt'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      if not requirements_txt:
          raise SystemExit('Could not find requirements.txt directory')
      project_location = path.dirname(path.abspath(manage_py))
      requirements_location = path.dirname(path.abspath(requirements_txt))
      print('Found Django project in', project_location)
      print('Found requirements txt in', requirements_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
      print('##vso[task.setvariable variable=requirementsRoot]{}'.format(requirements_location))

- script: |
    pushd '$(requirementsRoot)'
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()
